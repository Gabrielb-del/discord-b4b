import discord
import json
import pandas as pd
import os
import re
import asyncio
import datetime
from discord.ext import commands, tasks
from datetime import datetime, time
import unicodedata
from dotenv import load_dotenv

# Carrega as vari√°veis de ambiente do arquivo .env
load_dotenv()

# Obt√©m o token do arquivo .env
TOKEN = os.getenv('PETERBOT_TOKEN')
if not TOKEN:
    raise ValueError("Token n√£o encontrado no arquivo .env. Por favor, configure a vari√°vel PETERBOT_TOKEN")

ID_CANAL_MONITORADO = 1321965052454109194
ID_CANAL_COMANDOS = 1322216912691662868
ID_CANAL_QUALIFICACAO = 1321967249111781398  # Substitua pelo ID correto do canal de qualifica√ß√£o
ARQUIVO_JSON = "contas_abertas.json"
ARQUIVO_OPERADORES = "operadores.json"
ARQUIVO_QUALIFICADOS = "contatos_qualificados.json"
ARQUIVO_OPERADORES_QUALI = "operadores_quali.json"  # Novo arquivo para operadores de qualifica√ß√£o

# Fun√ß√£o para carregar operadores
def carregar_operadores():
    if os.path.exists(ARQUIVO_OPERADORES):
        with open(ARQUIVO_OPERADORES, "r", encoding="utf-8") as f:
            try:
                return json.load(f)
            except json.JSONDecodeError:
                return {}
    return {}

# Fun√ß√£o para salvar operadores
def salvar_operadores(operadores):
    with open(ARQUIVO_OPERADORES, "w", encoding="utf-8") as f:
        json.dump(operadores, f, indent=4, ensure_ascii=False)

# Carregar operadores ao iniciar
MAPEAMENTO_USUARIOS = carregar_operadores()

def carregar_dados():
    if os.path.exists(ARQUIVO_JSON):
        with open(ARQUIVO_JSON, "r", encoding="utf-8") as f:
            try:
                dados = json.load(f)
                if isinstance(dados, list):
                    return dados
                else:
                    return []
            except json.JSONDecodeError:
                return []
    return []

contas_abertas = carregar_dados()

# Fun√ß√£o para carregar contatos qualificados
def carregar_qualificados():
    if os.path.exists(ARQUIVO_QUALIFICADOS):
        with open(ARQUIVO_QUALIFICADOS, "r", encoding="utf-8") as f:
            try:
                dados = json.load(f)
                if isinstance(dados, list):
                    return dados
                else:
                    return []
            except json.JSONDecodeError:
                return []
    return []

# Lista para armazenar os contatos qualificados
contatos_qualificados = carregar_qualificados()

# Fun√ß√£o para carregar operadores de qualifica√ß√£o
def carregar_operadores_quali():
    if os.path.exists(ARQUIVO_OPERADORES_QUALI):
        with open(ARQUIVO_OPERADORES_QUALI, "r", encoding="utf-8") as f:
            try:
                return json.load(f)
            except json.JSONDecodeError:
                return {}
    return {}

# Fun√ß√£o para salvar operadores de qualifica√ß√£o
def salvar_operadores_quali(operadores):
    with open(ARQUIVO_OPERADORES_QUALI, "w", encoding="utf-8") as f:
        json.dump(operadores, f, indent=4, ensure_ascii=False)

# Carregar operadores de qualifica√ß√£o ao iniciar
MAPEAMENTO_USUARIOS_QUALI = carregar_operadores_quali()

intents = discord.Intents.default()
intents.messages = True
intents.message_content = True
intents.guilds = True
intents.members = True
bot = commands.Bot(command_prefix="!", intents=intents)

def normalizar_status(status):
    return ''.join(c for c in unicodedata.normalize('NFKD', status) if not unicodedata.combining(c)).lower()

def validar_status(status):
    status_normalizado = normalizar_status(status)
    return status_normalizado in ["analise", "aprovada", "carimbada", "reprovada"]

def padronizar_status(status):
    status_normalizado = normalizar_status(status)
    if status_normalizado == "analise":
        return "AN√ÅLISE"
    elif status_normalizado == "aprovada":
        return "APROVADA"
    elif status_normalizado == "carimbada":
        return "CARIMBADA"
    
    elif status_normalizado == "reprovada":
        return "REPROVADA"

    else:
        return status

def validar_cnpj(cnpj):
    regex = r"^\d{2}\.?\d{3}\.?\d{3}\/?\d{4}-?\d{2}$"
    return re.match(regex, cnpj) is not None


def padrao_origem(origem):
    return ''.join(c for c in unicodedata.normalize('NFD', origem) if not unicodedata.combining(c)).lower()

def validar_origem(origem):
    origem_normalizado = padrao_origem(origem)
    return origem_normalizado in ["lead manual", "repescagem", "discador", "mensageria", "indicacao", "ura","backoffice", "repescagem ura", "sms"]

def padronizar_origem(origem):
    origem_normalizado = padrao_origem(origem)
    if origem_normalizado == "lead manual":
        return "LEAD MANUAL"
    elif origem_normalizado == "repescagem":
        return "REPESCAGEM"
    
    elif origem_normalizado == "discador":
        return "DISCADOR"
    
    elif origem_normalizado == "mensageria":
        return "MENSAGERIA"
    elif origem_normalizado == "indicacao":
        return "INDICA√á√ÉO"
    
    elif origem_normalizado == "ura":
        return "URA"
    
    elif origem_normalizado == "backoffice":
        return "BACKOFFICE"
    
    elif origem_normalizado == "repescagem ura":
        return "REPESCAGEM URA"
    
    elif origem_normalizado == "sms":
        return "sms"
    
    else:

        return origem


def validar_email(email):
    return "@" in email

@tasks.loop(time=time(hour=0, minute=0))
async def resetar_contas():
    global contas_abertas
    contas_abertas = []
    with open(ARQUIVO_JSON, "w", encoding="utf-8") as f:
        json.dump(contas_abertas, f, indent=4, ensure_ascii=False)
    print("üîÑ Contas resetadas para o novo dia.")

@tasks.loop(time=time(hour=0, minute=0))
async def resetar_quali():
    global contatos_qualificados
    contatos_qualificados = []
    with open(ARQUIVO_JSON, "w", encoding="utf-8") as f:
        json.dump(contatos_qualificados, f, indent=4, ensure_ascii=False)
    print("üîÑ Contatos resetadas para o novo dia.")

@bot.event
async def on_ready():
    print(f'Logado como {bot.user}')
    print(f'Comandos registrados: {[cmd.name for cmd in bot.commands]}')
    resetar_contas.start()
    resetar_quali.start()

#Evento para verificar a mensagem a adicionar a conta indicada no 'contas_abertas.json'
@bot.event
async def on_message(message):
    if message.author.bot:
        return

    await bot.process_commands(message)

    if message.author == bot.user:
        return

    # Processamento de contas abertas
    if message.channel.id == ID_CANAL_MONITORADO:
        if not any(keyword in message.content for keyword in ["Empresa:", "CNPJ:", "Nome:", "Tel:", "E-mail:", "Origem:", "Consultor:", "Status:"]):
            return

        dados = message.content.strip().replace("\n", "").replace("\r", "")
        print(f'Dados antes de processar: "{dados}"')

        padrao = {
            "empresa": r"Empresa:\s*(.*?)(?=\s*CNPJ:|$)",
            "cnpj": r"CNPJ:\s*(\d+)(?=\s*Nome:|$)",
            "nome": r"Nome:\s*(.*?)(?=\s*Tel:|$)",
            "telefone": r"Tel:\s*(\d+)(?=\s*E-mail:|$)",
            "email": r"E-mail:\s*(.*?)(?=\s*Origem:|$)",
            "origem": r"Origem:\s*(.*?)(?=\s*Consultor:|$)",
            "consultor": r"Consultor:\s*(.*?)(?=\s*Status:|$)",
            "status": r"Status:\s*(.*)"
        }

        conta = {}
        campos_faltantes = []
        for chave, regex in padrao.items():
            resultado = re.search(regex, dados)
            if resultado:
                conta[chave] = resultado.group(1).strip()
                print(f'Campo "{chave}" encontrado: {conta[chave]}')
            else:
                campos_faltantes.append(chave)
                print(f'Campo "{chave}" n√£o encontrado na mensagem.')
        conta["hora_envio"] = datetime.now().strftime("%H:00")


        if len(campos_faltantes) > 0:
            await message.reply(f"‚ùå Faltam os seguintes campos: {', '.join(campos_faltantes)}. Por favor, envie novamente.")
            return

        if 'cnpj' in conta:
            if not validar_cnpj(conta['cnpj']):
                await message.reply("‚ùå CNPJ inv√°lido. O CNPJ deve ter 14 d√≠gitos.")
                return

        if 'status' in conta:
            status_normalizado = normalizar_status(conta['status'])
            if not validar_status(conta['status']):
                await message.reply("‚ùå Status inv√°lido. Use apenas 'An√°lise', 'Aprovada', 'Carimbada' ou 'Reprovada'.")
                return
            conta['status'] = padronizar_status(conta['status'])

        if 'origem' in conta:
            origem_normalizado  = padrao_origem(conta['origem'])
            if not validar_origem(conta['origem']):
                await message.reply("‚ùå Origem inv√°lida. Use apenas 'Lead Manual', 'Repescagem', 'Discador', 'Mensageria', 'Ura', 'Repescagem Ura', 'SMS', 'BackOffice' ou 'Indica√ß√£o'.")
                return
            conta['origem'] = padronizar_origem(conta['origem'])

        if 'email' in conta:
            if not validar_email(conta['email']):
                await message.reply("‚ùå E-mail inv√°lido. O e-mail deve conter '@'.")
                return

        nome_usuario = message.author.name
        if nome_usuario in MAPEAMENTO_USUARIOS:
            conta['consultor'] = MAPEAMENTO_USUARIOS[nome_usuario]
        else:
            await message.reply(f"‚ùå Nome de usu√°rio '{nome_usuario}' n√£o est√° mapeado. Contate o administrador.")
            return

        if 'cnpj' in conta:
            if not any('cnpj' in c and c['cnpj'] == conta['cnpj'] for c in contas_abertas):
                conta['mensagem_id'] = message.id
                contas_abertas.append(conta)
                with open(ARQUIVO_JSON, "w", encoding="utf-8") as f:
                    json.dump(contas_abertas, f, indent=4, ensure_ascii=False)
                print(f'Conta registrada: {conta}')
            else:
                print(f'CNPJ {conta["cnpj"]} j√° registrado.')
                await message.reply(f"‚ö†Ô∏è CNPJ {conta['cnpj']} j√° foi registrado anteriormente.")
        else:
            print(f'Chave "cnpj" n√£o encontrada na conta: {conta}')
            await message.reply("‚ùå A mensagem n√£o cont√©m um CNPJ v√°lido.")

    # Processamento de contatos qualificados
    elif message.channel.id == ID_CANAL_QUALIFICACAO:
        if not any(keyword in message.content for keyword in ["Empresa:", "Raz√£o Social:", "CNPJ:", "Nome:", "Tel:", "E-mail:", "Faturamento da Empresa:", "Data conta aberta:", "Nome do Consultor:", "Qualificada ou Contato:"]):
            return

        dados = message.content.strip()
        
        # Padr√µes para extrair informa√ß√µes do contato qualificado
        padrao_quali = {
            "empresa": r"(?:Empresa|Raz√£o Social):\s*(.*?)(?=\s*CNPJ:|$)",
            "cnpj": r"CNPJ:\s*(\d+)(?=\s*Nome:|$)",
            "nome": r"Nome:\s*(.*?)(?=\s*Tel:|$)",
            "telefone": r"Tel:\s*(\d+)(?=\s*E-mail:|$)",
            "email": r"E-mail:\s*(.*?)(?=\s*Faturamento da Empresa:|$)",
            "faturamento": r"Faturamento da Empresa:\s*(.*?)(?=\s*Data conta aberta:|$)",
            "data_conta": r"Data conta aberta:\s*(.*?)(?=\s*Nome do Consultor:|$)",
            "consultor": r"Nome do Consultor:\s*(.*?)(?=\s*Qualificada ou Contato:|$)",
            "tipo_qualificacao": r"Qualificada ou Contato:\s*(.*?)(?=\s*Observa√ß√µes sobre o contato:|$)",
            "observacoes": r"Observa√ß√µes sobre o contato:\s*(.*?)$"
        }

        contato = {}
        campos_faltantes = []
        
        for chave, regex in padrao_quali.items():
            resultado = re.search(regex, dados, re.DOTALL | re.IGNORECASE)
            if resultado:
                valor = resultado.group(1).strip()
                # Remove poss√≠veis quebras de linha no valor
                valor = ' '.join(valor.splitlines()).strip()
                contato[chave] = valor
            else:
                campos_faltantes.append(chave)

        contato["hora_envio"] = datetime.now().strftime("%H:00")
        contato["data_registro"] = datetime.now().strftime("%d/%m/%Y")
        contato["mensagem_id"] = message.id

        if len(campos_faltantes) > 0:
            await message.reply(f"‚ùå Faltam os seguintes campos: {', '.join(campos_faltantes)}. Por favor, envie novamente.")
            return

        # Valida√ß√µes espec√≠ficas para contatos qualificados
        if 'cnpj' in contato:
            if not validar_cnpj(contato['cnpj']):
                await message.reply("‚ùå CNPJ inv√°lido. O CNPJ deve ter 14 d√≠gitos.")
                return
            
            # Verifica se o CNPJ j√° foi registrado
            for contato_existente in contatos_qualificados:
                if contato_existente['cnpj'] == contato['cnpj']:
                    # Se o mesmo operador j√° registrou este CNPJ
                    if contato_existente.get('operador_quali') == MAPEAMENTO_USUARIOS_QUALI[message.author.name]:
                        await message.add_reaction("‚úÖ")
                        return
                    # Se outro operador j√° registrou este CNPJ
                    else:
                        await message.reply(f"‚ö†Ô∏è Este CNPJ j√° foi registrado pelo operador: {contato_existente.get('operador_quali')}")
                        return

        if 'email' in contato:
            if not validar_email(contato['email']):
                await message.reply("‚ùå E-mail inv√°lido. O e-mail deve conter '@'.")
                return

        # Verifica se o operador est√° no time de qualifica√ß√£o
        nome_usuario = message.author.name
        if nome_usuario in MAPEAMENTO_USUARIOS_QUALI:
            contato['operador_quali'] = MAPEAMENTO_USUARIOS_QUALI[nome_usuario]
            contato['consultor'] = contato['operador_quali']  # Usa o nome do operador de qualifica√ß√£o como consultor
        else:
            await message.reply(f"‚ùå Nome de usu√°rio '{nome_usuario}' n√£o est√° mapeado no time de qualifica√ß√£o. Contate o administrador.")
            return

        # Verifica e padroniza o tipo de qualifica√ß√£o
        tipo_quali = contato.get('tipo_qualificacao', '').strip().upper()
        if tipo_quali not in ['QUALIFICADA', 'CONTATO']:
            await message.reply("‚ùå Tipo de qualifica√ß√£o inv√°lido. Use 'Qualificada' ou 'Contato'.")
            return
        contato['tipo_qualificacao'] = tipo_quali

        # Adiciona o contato √† lista e salva no arquivo (sem verificar duplicidade)
        contatos_qualificados.append(contato)
        with open(ARQUIVO_QUALIFICADOS, "w", encoding="utf-8") as f:
            json.dump(contatos_qualificados, f, indent=4, ensure_ascii=False)
        
        await message.add_reaction("‚úÖ")

#Se a mensagem da conta indicada for apagada no chat, essa conta ser√° removida do json
@bot.event
async def on_message_delete(message):
    # Processamento de exclus√£o de contas abertas
    if message.channel.id == ID_CANAL_MONITORADO:
        print(f'Mensagem exclu√≠da detectada: ID {message.id}')
        for conta in contas_abertas:
            if 'mensagem_id' in conta and conta['mensagem_id'] == message.id:
                contas_abertas.remove(conta)
                with open(ARQUIVO_JSON, "w", encoding="utf-8") as f:
                    json.dump(contas_abertas, f, indent=4, ensure_ascii=False)
                print(f'Conta removida: {conta}')
                break
    
    # Processamento de exclus√£o de contatos qualificados
    elif message.channel.id == ID_CANAL_QUALIFICACAO:
        print(f'Mensagem de qualifica√ß√£o exclu√≠da detectada: ID {message.id}')
        for contato in contatos_qualificados:
            if 'mensagem_id' in contato and contato['mensagem_id'] == message.id:
                operador = contato.get('operador_quali', 'N√£o identificado')
                cnpj = contato.get('cnpj', 'N√£o informado')
                contatos_qualificados.remove(contato)
                with open(ARQUIVO_QUALIFICADOS, "w", encoding="utf-8") as f:
                    json.dump(contatos_qualificados, f, indent=4, ensure_ascii=False)
                print(f'Contato qualificado removido - Operador: {operador}, CNPJ: {cnpj}')
                break

@bot.command(name="exportar")
async def exportar(ctx):
    print(f'Comando "!exportar" recebido no canal {ctx.channel.name} (ID: {ctx.channel.id})')
    if ctx.channel.id == ID_CANAL_MONITORADO:
        return

    if contas_abertas:
        for conta in contas_abertas:
            if "data" not in conta:
                conta["data"] = datetime.now().strftime("%d/%m/%Y")

        colunas_desejadas = ["data", "hora_envio", "cnpj", "empresa", "consultor", "origem", "status"]
        df = pd.DataFrame(contas_abertas)
        df = df[[col for col in colunas_desejadas if col in df.columns]].fillna("")
        arquivo_excel = f"CONTAS_ABERTAS_{datetime.now().strftime('%d%m%Y_%H%M%S')}.xlsx"
        df.to_excel(arquivo_excel, index=False)

        await ctx.send("Aqui est√° o arquivo de contas abertas:", file=discord.File(arquivo_excel))
    else:
        await ctx.send("Nenhuma conta aberta registrada at√© o momento.")

@bot.command(name="expquali")
async def expquali(ctx):
    print(f'Comando "!expquali" recebido no canal {ctx.channel.name} (ID: {ctx.channel.id})')
    if ctx.channel.id == ID_CANAL_MONITORADO:
        return

    if contatos_qualificados:
        # Criar uma c√≥pia dos contatos para n√£o modificar os originais
        contatos_para_excel = []
        for contato in contatos_qualificados:
            contato_modificado = contato.copy()
            # Procurar o nome completo do operador
            nome_usuario = next((usuario for usuario, nome in MAPEAMENTO_USUARIOS_QUALI.items() 
                              if nome == contato['consultor']), None)
            if nome_usuario:
                contato_modificado['consultor'] = MAPEAMENTO_USUARIOS_QUALI[nome_usuario]
            contatos_para_excel.append(contato_modificado)

        colunas_desejadas = ["data_registro", "hora_envio", "cnpj", "empresa", "nome", "telefone", "email", 
                            "faturamento", "data_conta", "consultor", "tipo_qualificacao", "observacoes"]
        df = pd.DataFrame(contatos_para_excel)
        df = df[[col for col in colunas_desejadas if col in df.columns]].fillna("")
        arquivo_excel = f"CONTATOS_QUALIFICADOS_{datetime.now().strftime('%d%m%Y_%H%M%S')}.xlsx"
        df.to_excel(arquivo_excel, index=False)

        await ctx.send("üìä Aqui est√° o arquivo de contatos qualificados:", file=discord.File(arquivo_excel))
        
        # Remover o arquivo ap√≥s enviar
        os.remove(arquivo_excel)
    else:
        await ctx.send("‚ùå Nenhum contato qualificado registrado at√© o momento.")

# Comandos para gerenciar operadores
@bot.command(name="adicionar_operador")
async def adicionar_operador(ctx, usuario_discord: str, primeiro_nome: str, *, nome_completo: str):
    """Adiciona um novo operador
    Exemplo: !adicionar_operador joao.b4b Jo√£o 'Jo√£o Silva Santos'"""
    if ctx.channel.id != ID_CANAL_COMANDOS:
        return
        
    global MAPEAMENTO_USUARIOS
    MAPEAMENTO_USUARIOS[usuario_discord] = nome_completo
    salvar_operadores(MAPEAMENTO_USUARIOS)
    await ctx.send(f"‚úÖ Operador adicionado com sucesso!\nUsu√°rio Discord: {usuario_discord}\nNome Completo: {nome_completo}")

@bot.command(name="remover_operador")
async def remover_operador(ctx, usuario_discord: str):
    """Remove um operador
    Exemplo: !remover_operador joao.b4b"""
    if ctx.channel.id != ID_CANAL_COMANDOS:
        return
        
    global MAPEAMENTO_USUARIOS
    if usuario_discord in MAPEAMENTO_USUARIOS:
        del MAPEAMENTO_USUARIOS[usuario_discord]
        salvar_operadores(MAPEAMENTO_USUARIOS)
        await ctx.send(f"‚úÖ Operador {usuario_discord} removido com sucesso!")
    else:
        await ctx.send(f"‚ùå Operador {usuario_discord} n√£o encontrado!")

@bot.command(name="listar_operadores")
async def listar_operadores(ctx):
    """Lista todos os operadores cadastrados"""
    if ctx.channel.id != ID_CANAL_COMANDOS:
        return
        
    if not MAPEAMENTO_USUARIOS:
        await ctx.send("Nenhum operador cadastrado!")
        return
        
    mensagem = "üìã **Lista de Operadores:**\n\n"
    for usuario, nome in MAPEAMENTO_USUARIOS.items():
        mensagem += f"üë§ **{usuario}** - {nome}\n"
    
    await ctx.send(mensagem)

@bot.command(name="atualizar_operador")
async def atualizar_operador(ctx, usuario_discord: str, *, novo_nome_completo: str):
    """Atualiza o nome completo de um operador
    Exemplo: !atualizar_operador joao.b4b 'Jo√£o Silva Santos Junior'"""
    if ctx.channel.id != ID_CANAL_COMANDOS:
        return
        
    global MAPEAMENTO_USUARIOS
    if usuario_discord in MAPEAMENTO_USUARIOS:
        MAPEAMENTO_USUARIOS[usuario_discord] = novo_nome_completo
        salvar_operadores(MAPEAMENTO_USUARIOS)
        await ctx.send(f"‚úÖ Nome do operador {usuario_discord} atualizado para: {novo_nome_completo}")
    else:
        await ctx.send(f"‚ùå Operador {usuario_discord} n√£o encontrado!")

# Comandos para gerenciar operadores de qualifica√ß√£o
@bot.command(name="adicionar_quali")
async def adicionar_operador_quali(ctx, usuario_discord: str, primeiro_nome: str, *, nome_completo: str):
    """Adiciona um novo operador ao time de qualifica√ß√£o
    Exemplo: !adicionar_quali joao.b4b Jo√£o 'Jo√£o Silva Santos'"""
    if ctx.channel.id != ID_CANAL_COMANDOS:
        return
        
    global MAPEAMENTO_USUARIOS_QUALI
    MAPEAMENTO_USUARIOS_QUALI[usuario_discord] = nome_completo
    salvar_operadores_quali(MAPEAMENTO_USUARIOS_QUALI)
    await ctx.send(f"‚úÖ Operador de qualifica√ß√£o adicionado com sucesso!\nUsu√°rio Discord: {usuario_discord}\nNome Completo: {nome_completo}")

@bot.command(name="remover_quali")
async def remover_operador_quali(ctx, usuario_discord: str):
    """Remove um operador do time de qualifica√ß√£o
    Exemplo: !remover_quali joao.b4b"""
    if ctx.channel.id != ID_CANAL_COMANDOS:
        return
        
    global MAPEAMENTO_USUARIOS_QUALI
    if usuario_discord in MAPEAMENTO_USUARIOS_QUALI:
        del MAPEAMENTO_USUARIOS_QUALI[usuario_discord]
        salvar_operadores_quali(MAPEAMENTO_USUARIOS_QUALI)
        await ctx.send(f"‚úÖ Operador de qualifica√ß√£o {usuario_discord} removido com sucesso!")
    else:
        await ctx.send(f"‚ùå Operador de qualifica√ß√£o {usuario_discord} n√£o encontrado!")

@bot.command(name="listar_quali")
async def listar_operadores_quali(ctx):
    """Lista todos os operadores do time de qualifica√ß√£o"""
    if ctx.channel.id != ID_CANAL_COMANDOS:
        return
        
    if not MAPEAMENTO_USUARIOS_QUALI:
        await ctx.send("Nenhum operador de qualifica√ß√£o cadastrado!")
        return
        
    mensagem = "üìã **Lista de Operadores de Qualifica√ß√£o:**\n\n"
    for usuario, nome in MAPEAMENTO_USUARIOS_QUALI.items():
        mensagem += f"üë§ **{usuario}** - {nome}\n"
    
    await ctx.send(mensagem)

@bot.command(name="atualizar_quali")
async def atualizar_operador_quali(ctx, usuario_discord: str, *, novo_nome_completo: str):
    """Atualiza o nome completo de um operador de qualifica√ß√£o
    Exemplo: !atualizar_quali joao.b4b 'Jo√£o Silva Santos Junior'"""
    if ctx.channel.id != ID_CANAL_COMANDOS:
        return
        
    global MAPEAMENTO_USUARIOS_QUALI
    if usuario_discord in MAPEAMENTO_USUARIOS_QUALI:
        MAPEAMENTO_USUARIOS_QUALI[usuario_discord] = novo_nome_completo
        salvar_operadores_quali(MAPEAMENTO_USUARIOS_QUALI)
        await ctx.send(f"‚úÖ Nome do operador de qualifica√ß√£o {usuario_discord} atualizado para: {novo_nome_completo}")
    else:
        await ctx.send(f"‚ùå Operador de qualifica√ß√£o {usuario_discord} n√£o encontrado!")

bot.run(TOKEN)